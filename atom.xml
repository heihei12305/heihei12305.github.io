<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://heihei12305.github.io</id>
    <title>heihei12305</title>
    <updated>2020-06-05T10:50:22.906Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://heihei12305.github.io"/>
    <link rel="self" href="https://heihei12305.github.io/atom.xml"/>
    <subtitle>所见即所得，所见即所碍</subtitle>
    <logo>https://heihei12305.github.io/images/avatar.png</logo>
    <icon>https://heihei12305.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, heihei12305</rights>
    <entry>
        <title type="html"><![CDATA[抓住春招的小尾巴，21届前端 百度&字节&阿里面经]]></title>
        <id>https://heihei12305.github.io/post/zhua-zhu-chun-zhao-de-xiao-wei-ba-21-jie-qian-duan-bai-du-andzi-jie-anda-li-mian-jing/</id>
        <link href="https://heihei12305.github.io/post/zhua-zhu-chun-zhao-de-xiao-wei-ba-21-jie-qian-duan-bai-du-andzi-jie-anda-li-mian-jing/">
        </link>
        <updated>2020-06-05T10:10:43.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>背景描述： 今年三月初入职网易，近期因业务调整从网易离职，然后裸辞后就直接上了（周五离职，然后周六开始面，连续七天。。。），打算争取一下最后的直接转正机会。</p>
</blockquote>
<h3 id="最后结果百度二面后收到oc此时距离裸辞5天字节正常流程三面hr收到offer此时距离裸辞10天决定入职阿里走完技术面共四轮技术面看反馈是交叉面已经过了等待hr面">最后结果：百度二面后收到oc（此时距离裸辞5天）；字节正常流程三面+hr，收到offer（此时距离裸辞10天），决定入职；阿里走完技术面（共四轮技术面），看反馈是交叉面已经过了，等待hr面</h3>
<p>其中基本没有特殊的面试题，都比较友好常规。</p>
<p>记不住具体的了，混一起说了。。。</p>
<h3 id="js-方面">js 方面</h3>
<ul>
<li>for of / for in 区别，for of原理，为什么引入迭代器，对象什么时候可以使用for of？ symbol.iterator 返回的数据类型是什么？一般使用for in需要注意什么？为什么要用obj.hasOwnproperty？</li>
<li>promise用过么，一个特别麻烦的promise+setTimeout让把输出结果写出来。它解决了什么问题？ es7引入的async的原理是什么？生成器函数的原理是什么？</li>
<li>js 的垃圾回收能说说么，为什么要分为旧生代和新生代。内存泄漏是怎么发生的？</li>
<li>闭包是什么？它是怎么形成的，能从词法分析角度说说么？</li>
<li>new 绑定过程</li>
</ul>
<pre><code>Function.prototype.a = 1; 
Object.prototype.b = 2; 
function Test(){} 
let t = new Test(); 
t.a? t.b?
</code></pre>
<ul>
<li>this 相关，输出结果是什么，为什么？</li>
</ul>
<pre><code>var obj = { 

  fn: function(){ 
       console.log(this) //this-&gt; 
       return ()=&gt;{ 
           console.log(this) // this-&gt; 
           (function(){console.log(this)})(); //this-&gt;window 
           setTimeout(function(){console.log(this)},1);  //this-&gt; 
       } 
  } 
} 

obj.fn()();
</code></pre>
<ul>
<li>词法分析相关，输出结果是什么，为什么？（其实这个变了好多次，从简单到难。。。）</li>
</ul>
<pre><code>var a = 1; 

(function(a){ 

     alert(a++); 
   let a = 2; 
})(a); 


alert(++a); 

//1,3; NAN,2; NAN,2; 1,2
</code></pre>
<ul>
<li>let const var 区别，为什么下面代码不会报错？</li>
</ul>
<pre><code>const a = {};
a.b = 1;
</code></pre>
<ul>
<li>symbol.iterator symbol.hasInstance, symbol.toPrimitive 的作用是什么？</li>
</ul>
<h3 id="css-问的确实不多">css 问的确实不多</h3>
<p>flex用的多么？flex-shrink flex-grow 是什么意思？</p>
<h3 id="浏览器相关">浏览器相关</h3>
<ul>
<li>说说从输入url到页面出现经历了什么，越详细越好</li>
<li>csrf xss 分别是什么？</li>
<li>http缓存说一下</li>
<li>https的原理能不能说一下</li>
<li>说说你知道的http状态码吧</li>
</ul>
<h3 id="vue相关">vue相关</h3>
<ul>
<li>vue与react区别</li>
<li>vue变换侦测原理</li>
<li>vue为什么引入虚拟dom</li>
<li>vue 3.0 出现了什么新东西</li>
<li>vue虚拟dom与传统二叉树有什么区别</li>
<li>vue的key的作用是什么</li>
</ul>
<h3 id="算法题部分">算法题部分</h3>
<ul>
<li>
<p><code>[{id:1, name: 1, parent:1000}, {id:1, name: 1, parent:1000}]</code>把它变成树形结构，要求o(n)复杂度</p>
</li>
<li>
<p>手写 柯里化函数</p>
</li>
<li>
<p>实现indexOf函数</p>
</li>
<li>
<p><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">无重复字符的最长子串</a></p>
</li>
<li>
<p><a href="https://leetcode-cn.com/problems/assign-cookies/">分发饼干</a></p>
</li>
<li>
<p>想不起来了，都是easy&amp;middle难度反正。。。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深入浅出React和Redux笔记📒]]></title>
        <id>https://heihei12305.github.io/post/shen-ru-qian-chu-react-he-redux-bi-ji/</id>
        <link href="https://heihei12305.github.io/post/shen-ru-qian-chu-react-he-redux-bi-ji/">
        </link>
        <updated>2020-04-18T08:07:04.000Z</updated>
        <content type="html"><![CDATA[<p>即使现在我们还是要说在HTML中直接使用onclick很不专业，原因如下</p>
<ul>
<li>onclik 添加的事件处理函数在全局环境下执行，这污染了全局环境，很容易产生意料不到的后果；</li>
<li>给很多DOM元素添加onclick事件，可能会影响网页的性能，毕竟，网页需要的事件处理函数越多，性能就会越低；</li>
<li>对于使用onclick的DOM元素，如果要动态的从DOM元素中删除的话，需要把对应的时间处理器注销，如果忘了可能会造成内存泄露，这样的bug很难被发现。</li>
</ul>
<p>上面说的这些问题，在JSX中都不存在。<br>
首先，onClick挂载的每个函数，都可以控制在组件范围内，不会污染全局空间。<br>
我们在JSX中看到一个组件使用了onClick，但并没有产生直接使用onclick(注意是onclick而不是onClick)的HTML,而是使用了事件委托的方式处理点击事件，无论有多少个onClick出现，其实最后都只在DOM树上添加了一个事件处理函数，挂在最顶层的DOM节点上。所有的点击事件都被这个事件处理函数捕获，然后根据具体组件分配给特定函数，使用事件委托的性能当然要比为每个onClick都挂载一个事件处理函数要高。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[vue 源码原理部分  依赖收集]]></title>
        <id>https://heihei12305.github.io/post/vue-yuan-ma-yuan-li-bu-fen-yi-lai-shou-ji/</id>
        <link href="https://heihei12305.github.io/post/vue-yuan-ma-yuan-li-bu-fen-yi-lai-shou-ji/">
        </link>
        <updated>2020-04-06T10:35:36.000Z</updated>
        <content type="html"><![CDATA[<h3 id="依赖收集">依赖收集</h3>
<p>在 getter 中收集依赖，在 setter 中触发依赖</p>
<pre><code>fucntion defineReactive(data, key, val) {
    const dep = [] //新增
    Object.defineProperty(data, key {
        enumerable: true,
        configurable: true,
        get: fucntion() {
            dep.push(window.target) //新增
            return val;
        },
        set: function(newVal) {
            if(val === newVal) {
                return ;
            }

            for(let i = 0;i &lt; dep.length; i++) {
                dep[i](newVal, val);
            }
            val = newVal;
        }
    })
}
</code></pre>
<p>这里我们新增了数组dep，用来存储被收集的依赖。<br>
然后在set被触发时，循环dep以触发收集到的依赖</p>
<h3 id="更好的解耦版本">更好的解耦版本</h3>
<p>把依赖收集的代码封装成一个Dep类，它专门帮助我们使用这个类，我们可以收集依赖，删除依赖或者向依赖发送通知等。</p>
<pre><code>export default class Dep {
    constructor () {
        this.subs = [];
    }

    addSub (sub) {
        this.subs.push(sub);
    }

    removeSub(sub) {
       remove(this.subs, sub);
    }

    depend () {
        if(window.target) {
            this.addSub(window.target);
        }
    }

    notify () {
        const subs = this.subs.slice();
        for(let i = 0, len = subs.length;i&lt;len;i++) {
            subs[i].update();
        }
    }
}

function remove (arr, item) {
    if(arr.length) {
        const index = arr.indexOf(item);
        if(index &gt; -1) {
            return arr.splice(index, 1);
        }
    }
}

function defineReactive (data, key, val) {
    const dep = new Dep();
    Object.defineProperty(data, key, {
        enumerable: true,
        configurable: true,
        get: function () {
            dep.depend();
            return val;
        },
        set: function () {
            if(val === newVal) {
                return;
            }
            val = newVal;
            dep.notify(); //新增
        }
    })
}
</code></pre>
<p>依赖收集到哪了？收集到Dep中了。</p>
<h3 id="watcher">Watcher</h3>
<p>watcher是一个中介角色，数据发生变化时通知它，然后它再通知到其他地方。</p>
<pre><code>export default class watcher {
    constructor (vm, expOrFn, cb) {
        this.vm = vm;
        // 执行this.getter(), 就可以读取data.a.b.c的内容
        this.getter = parsePath(expOrFn);
        this.cb = cb;
        this.value = this.get();
    }

    get() {
        window.target = this;
        let value = this.getter.call(this.vm, this.vm);
        window.target = undefined;
        return value;
    }

    update () {
        const oldValue = this.value;
        this.value = this.get();
        this.cb.call(this.vm. this.value, oldValue);
    }
}
</code></pre>
<p>先在window.target赋一个this, 也就是当前watcher实例，然后再读一下 data.a.b.c的值，这肯定会触发getter。<br>
触发了getter, 就会触发依赖收集逻辑，按上文介绍的，会从window.target中读取一个依赖并添加到Dep中。<br>
这就导致，只要先在window.target中赋一个this，然后再读一下值，去触发getter，就可以把this主动加到keypath的Dep中。</p>
<p>parsePath 实现也很机智</p>
<pre><code>/**
* 解析简单路径
**/

const bailRE = /[^\w.$]/;
export function parsePath (path) {
    if(bailRE.test(psth)) {
        return ;
    }
    const segments = path.split('.');
    return function (obj) {
        for(let i = 0,len = segments.length;i&lt;len;i++) {
            if(!obj) return ;
            obj = obj[segments[i]];
        }
        return obj;
    }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[es2019有什么新功能？]]></title>
        <id>https://heihei12305.github.io/post/es10-de-xin-te-xing-hui-zong/</id>
        <link href="https://heihei12305.github.io/post/es10-de-xin-te-xing-hui-zong/">
        </link>
        <updated>2020-04-05T03:43:09.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文类似一篇翻译，原文在这：<a href="https://medium.com/@selvaganesh93/javascript-whats-new-in-ecmascript-2019-es2019-es10-35210c6e7f4b">https://medium.com/@selvaganesh93/javascript-whats-new-in-ecmascript-2019-es2019-es10-35210c6e7f4b</a></p>
</blockquote>
<figure data-type="image" tabindex="1"><img src="https://heihei12305.github.io/post-images/1586059508146.png" alt="" loading="lazy"></figure>
<h3 id="1-arrayflat">1. Array.Flat()</h3>
<h4 id="简介">简介</h4>
<p>数组扁平化，可以设置层级，具体推荐阅读讶羽的这篇blog:<a href="https://github.com/mqyqingfeng/Blog/issues/36">https://github.com/mqyqingfeng/Blog/issues/36</a></p>
<h4 id="简要实例">简要实例</h4>
<pre><code>[1,[2,[3]]].flat() // [1, 2 ,[3]]
[1,[2,[3]]].flat(2) //[1, 2, 3]
[1,[2,[3]]].flat(Infinity) //[1,2,3]
</code></pre>
<h3 id="2-arrayflatmap">2. Array.flatMap()</h3>
<h4 id="简介-2">简介</h4>
<p>相当于在原有map的基础上叠加了flat功能, 不过无法设置层级只能扁平一层</p>
<h4 id="简要实例-2">简要实例</h4>
<pre><code>const arr = [1, 2, 3];
arr.map(x =&gt; [x, x*2]); //[[1,2],[3,4],[5,6]]
arr.map(x =&gt; [x, x*2]).flat(); // [1, 2, 2, 4, 3, 6]
</code></pre>
<h3 id="3-objectfromentries">3. Object.fromEntries()</h3>
<h4 id="简介-3">简介</h4>
<p>fromEntries方法将键值对列表转换为对象。</p>
<blockquote>
<p>注意 Object.fromEntries 仅接受可迭代，它只会接受Map或Array</p>
</blockquote>
<h4 id="简要实例-3">简要实例</h4>
<pre><code>const arr = [['a',1],['b',2]];
Object.fromEntries(arr);//{a: 1, b: 2}
</code></pre>
<h3 id="4-stringtrimstart-stringtrimend">4. String.trimStart() &amp; String.trimEnd()</h3>
<h4 id="简介-4">简介</h4>
<p>去除头部或者尾部空格</p>
<p>为什么有了trimLeft &amp; trimRight还会有trimStart &amp; trimEnd呢？</p>
<blockquote>
<p>为了与 String.prototype.padStart 等函数保持一致，标准方法名称为trimStart。 但是，出于 Web 兼容性原因，trimLeft 仍然是 trimStart 的别名。在某些引擎中，这意味着：<code>String.prototype.trimLeft.name === &quot;trimStart&quot;;</code></p>
<p align="right">--MDN</p>
</blockquote>
<h4 id="简要实例-4">简要实例</h4>
<pre><code>'    a'.trimStart(); //'a'
'a    '.trimEnd()
</code></pre>
<h3 id="5-可选捕获参数">5. 可选捕获参数</h3>
<h4 id="简介-5">简介</h4>
<p>catch可以不用必须带有时用不上的参数啦。</p>
<pre><code>try{

}catch(unUsed) {

}
</code></pre>
<p>像上文的代码，如果你使用了 eslint 或者其它的工具则会报告一个警告或者错误，但是又不得不写，就很难受……</p>
<p><code>catch(e){}</code>和<code>catch{}</code>底层处理肯定大有可究之处，可惜笔者学艺不精，分析不下去，😭</p>
<blockquote>
<p>ecma对应链接：<a href="https://tc39.es/proposal-optional-catch-binding/">https://tc39.es/proposal-optional-catch-binding/</a></p>
</blockquote>
<h4 id="简要实例-5">简要实例</h4>
<pre><code>try{

}catch{

}
</code></pre>
<h3 id="6-functiontostring">6. Function.toString()</h3>
<h4 id="简介-6">简介</h4>
<p>该toString()方法返回一个表示函数源代码的字符串。</p>
<h4 id="简要实例-6">简要实例</h4>
<pre><code>function func(){
console.log(1)
//lalal
    //lal
}
func.toString()
//  &quot;function func(){
//  //console.log(1)
//  //lalal
//     //lal
}&quot;
</code></pre>
<h3 id="7-symboldescription">7. Symbol.description</h3>
<h4 id="简介-7">简介</h4>
<p>只读description属性是一个字符串，返回Symbol对象的可选描述。</p>
<h4 id="简要实例-7">简要实例</h4>
<pre><code>const sym = Symbol('heihei');
sym.description // &quot;heihei&quot;
</code></pre>
<h3 id="8-格式良好的jsonstringify">8, 格式良好的JSON.stringify()</h3>
<h4 id="简介-8">简介</h4>
<p>返回JSON.stringify返回格式错误的Unicode字符串</p>
<h4 id="简要实例-8">简要实例</h4>
<pre><code>JSON.stringify('\uD834\uDF06') //&quot;&quot;𝌆&quot;&quot;
</code></pre>
<h3 id="9-数组排序的稳定性">9, 数组排序的稳定性</h3>
<h4 id="简介-9">简介</h4>
<p>以前，v8对10个及以上元素的数组使用不稳定的quickSort(这块可以看讶羽的<a href="https://github.com/mqyqingfeng/Blog/issues/52">https://github.com/mqyqingfeng/Blog/issues/52</a>), 从V8 v7.0/chrome 70 开始，V8使用稳定的<em>Timsort</em>算法<br>
评分相同的用户将保持其排序顺序</p>
<h4 id="简要实例-9">简要实例</h4>
<pre><code>const usersList = [
    {name:'heihei1',rating: 1},
    {name:'heihei2',rating: 2},
    {name:'heihei3',rating: 1},
    {name:'heihei4',rating: 2}
]
usersList.sort((a,b)=&gt;a.rating-b.rating)
// 0: {name: &quot;heihei1&quot;, rating: 1}
// 1: {name: &quot;heihei3&quot;, rating: 1}
// 2: {name: &quot;heihei2&quot;, rating: 2}
// 3: {name: &quot;heihei4&quot;, rating: 2}
</code></pre>
<h3 id="10-json-ecmascript">10, JSON ⊂ ECMAScript</h3>
<h4 id="简介-10">简介</h4>
<p>将ECMA-262语法扩展为JSON的超集。ecma对应链接 <a href="https://tc39.es/proposal-json-superset/">https://tc39.es/proposal-json-superset/</a></p>
<blockquote>
<p>JSON语法由ECMA-404定义，并由RFC 7159永久固定，但是ECMA-262 的DoubleStringCharacter和SingleStringCharacter生产可以扩展为允许不转义的U + 2028 LINE SEPARATOR和U + 2029 PARAGRAPH SEPARATOR字符。</p>
<p align="right"> --原文直接搬运</p>
</blockquote>
<h4 id="简要实例-10">简要实例</h4>
<pre><code>const usersList = [
    {name:'heihei1',rating: 1},
    {name:'heihei2',rating: 2},
    {name:'heihei3',rating: 1},
    {name:'heihei4',rating: 2}
]
usersList.sort((a,b)=&gt;a.rating-b.rating)
// 0: {name: &quot;heihei1&quot;, rating: 1}
// 1: {name: &quot;heihei3&quot;, rating: 1}
// 2: {name: &quot;heihei2&quot;, rating: 2}
// 3: {name: &quot;heihei4&quot;, rating: 2}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[electron初体验 - 番茄钟开发]]></title>
        <id>https://heihei12305.github.io/post/electron-chu-ti-yan-fan-qie-zhong-kai-fa/</id>
        <link href="https://heihei12305.github.io/post/electron-chu-ti-yan-fan-qie-zhong-kai-fa/">
        </link>
        <updated>2020-04-04T15:02:00.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>今天猛的发现, 上一篇博客居然是近一个月了。心里有点感概，时间真的不经意间遛的飞快。</p>
</blockquote>
<h3 id="前言">前言</h3>
<p>最近突然发现electron，一个可以开发桌面端应用的js框架，很感兴趣，开整开整！</p>
<h4 id="预期目标">预期目标😇</h4>
<ul>
<li>整点好玩的东西出来</li>
<li>借此了解下node，原生UI</li>
<li>放飞想象力，js很强很强💪</li>
</ul>
<h3 id="why-electron">why electron</h3>
<ul>
<li>这是一个没有ie的世界，只需要对chrome负责，可以大胆使用chrome的最新的Feature
<ul>
<li>
<p>纯天然lazy load  <code>loading=&quot;lazy&quot;</code> demo页： <a href="https://mathiasbynens.be/demo/img-loading-lazy">https://mathiasbynens.be/demo/img-loading-lazy</a></p>
</li>
<li>
<p>BigInt</p>
</li>
<li>
<p>flat, padStart 等新特性</p>
</li>
</ul>
</li>
</ul>
<h3 id="使用的库">使用的库</h3>
<ul>
<li>timer.js</li>
<li>progressbar.js</li>
</ul>
<p>不想写了，😭，放个github链接算了：<br>
<a href="https://github.com/heihei12305/Pomodoro-">https://github.com/heihei12305/Pomodoro-</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[lodash源码系列-concat]]></title>
        <id>https://heihei12305.github.io/post/lodash_concat/</id>
        <link href="https://heihei12305.github.io/post/lodash_concat/">
        </link>
        <updated>2020-03-08T08:20:44.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>所见即所得，所见即所碍</p>
</blockquote>
<p>系列概述：</p>
<ul>
<li>阅读lodash源码，并做适当笔记</li>
<li>手抄一份，学习其中实现的小技巧</li>
<li>尽量比较出与原生方法的区别</li>
</ul>
<h3 id="1-函数效果">1. 函数效果</h3>
<h4 id="测试代码">测试代码</h4>
<pre><code>const _ = require('lodash')

const vec = [1,2,3,4,5];
const a = {
 a: 1
}
const vec2 = _.concat(vec,2,a);
console.log(vec); //[ 1, 2, 3, 4, 5 ]
console.log(vec2);  //[ 1, 2, 3, 4, 5, 2, { a: 1 } ]
a.a = 2;
console.log(vec2); //[ 1, 2, 3, 4, 5, 2, { a: 2 } ]
</code></pre>
<h4 id="效果描述">效果描述：</h4>
<p><code>_.concat(array, [values])</code><br>
创建一个新数组，将array与任何数组 或 值 连接在一起</p>
<p>注意：</p>
<ol>
<li>产生一个新的数组（⚠️这一定程度上导致了较push性能不是很好）</li>
<li>浅拷贝</li>
</ol>
<h3 id="2-手抄代码">2. 手抄代码</h3>
<h4 id="导入功能代码">导入功能代码：</h4>
<p>列举</p>
<ul>
<li>arrayPush</li>
<li>baseFlatten</li>
<li>copyArray</li>
<li>isArray</li>
</ul>
<p>比较有趣的地方：</p>
<p>拷贝数组</p>
<pre><code>fucntion copyArray(source, array) {
    let index = -1, length = source.length;
    //利用短路求值特性，实现守护功能
    array || (array = Array(length);
    while(++index &lt; length) {
        array[index] = source[index];
    }
    return array;
}
</code></pre>
<p>数组扁平化 （细节待flatten再说）</p>
<pre><code>function baseFlatten(array, depth, predicate, isStrict, result) {
    const index = -1, length = array.length;

    predicate || (predicate = isFlattenable);
    result || (result = []);

    while(++index &lt; length) {
        let value = array[index];
        if(depth &gt; 0 &amp;&amp; predicate(value)) {
            if(depth &gt; 1) {
                //递归啦递归啦
                baseFlatten(value, depth-1, predicate, isStrict, result);
            } else {
                arrPush(result, value);
            }
        } else if(!isStrict) {
            // 什么数据会触发这个呢？ ⚠️待解决
            result[result.length] = value;
        }
    }
    return rsult;
}
</code></pre>
<h4 id="主要代码">主要代码</h4>
<pre><code>function concat() {
    let length = arguments.length;
    if(!length) {
        return [];
    }

    let args = Array(length - 1),
            array = argument[0],
            index = length;

    //细品，比平时少了个变量，但一切刚刚好，👍
    while (index--) {
        args[index - 1] = arguments[index];
    }

    return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));

}
</code></pre>
<h3 id="3-技巧总结">3. 技巧总结</h3>
<ul>
<li>短路求值</li>
</ul>
<pre><code>//例
predicate || (predicate = isFlattenable);
</code></pre>
<ul>
<li>赋值，从后向前</li>
</ul>
<pre><code>//例

while (index--) {
    args[index - 1] = arguments[index];
}
</code></pre>
<p>不过这种单纯赋值操作，更直观的还是用slice, splice来实现吧</p>
<pre><code>//例
vec.slice(1);
vec.splice(1)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[http-proxy-middleware 跨域跨域跨域]]></title>
        <id>https://heihei12305.github.io/post/http-proxy-middleware-kua-yu-kua-yu-kua-yu/</id>
        <link href="https://heihei12305.github.io/post/http-proxy-middleware-kua-yu-kua-yu-kua-yu/">
        </link>
        <updated>2020-02-16T09:44:37.000Z</updated>
        <content type="html"><![CDATA[<p>配置 https 跨域<br>
src/setupProxy.js</p>
<pre><code>const proxy = require('http-proxy-middleware');

module.exports = function(app) {
  app.use(proxy('/v1/token', {
     target: 'https://oauth.aliyun.com/',
     &quot;secure&quot;: false,
     &quot;changeOrigin&quot;: true
    }));
};

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2019/1/27-2020/2/27 --一个月春招突击计划]]></title>
        <id>https://heihei12305.github.io/post/2019127-2020227-yi-ge-yue-chun-zhao-tu-ji-ji-hua/</id>
        <link href="https://heihei12305.github.io/post/2019127-2020227-yi-ge-yue-chun-zhao-tu-ji-ji-hua/">
        </link>
        <updated>2020-01-27T09:12:24.000Z</updated>
        <content type="html"><![CDATA[<h3 id="当前处境">当前处境：</h3>
<ul>
<li>
<p>武汉出事，全国戒严，也不知道什么时候能去公司，有点心疼房租，不对跑题了，可能在家会待的久一些。</p>
</li>
<li>
<p>书基本看的差不多了，然后 极客时间 专栏也差不多了。</p>
</li>
<li>
<p>技术栈到位</p>
</li>
<li>
<p>项目到位</p>
</li>
</ul>
<p>突击一个月，只奔大厂去。</p>
<h3 id="一个月目标">一个月目标</h3>
<ul>
<li>leetcode 400</li>
<li>重学前端 三刷</li>
<li>css世界 三刷</li>
<li>趣谈网络协议 三刷</li>
<li>javaScript核心原理解析 二刷</li>
<li>你不知道的jsvaScript 三刷</li>
<li>各种面试题集</li>
<li>讶羽博客汇总 三刷</li>
<li>wtfjs 三刷</li>
</ul>
<h3 id="具体安排">具体安排：</h3>
<p>因为时间并不是很确定，暂定</p>
<p>在家时：</p>
<ul>
<li>上午 重学前端  音频➕文字 &amp; wtfjs</li>
<li>下午leetcode 2道左右 &amp; 各种面经</li>
<li>晚上 红宝书 阅读 ｜ css选择器世界阅读 &amp; <s>讶羽博客汇总</s> ✅  掘金小册 性能优化-修言</li>
</ul>
<blockquote>
<p>所见即所得，所见即所碍。春招，加油⛽️</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[👀github博客不能翻页？快速生成gitbook了解一下]]></title>
        <id>https://heihei12305.github.io/post/github-bo-ke-bu-neng-fan-ye-kuai-su-sheng-cheng-gitbook-liao-jie-yi-xia/</id>
        <link href="https://heihei12305.github.io/post/github-bo-ke-bu-neng-fan-ye-kuai-su-sheng-cheng-gitbook-liao-jie-yi-xia/">
        </link>
        <updated>2020-01-19T06:47:54.000Z</updated>
        <content type="html"><![CDATA[<h3 id="预期效果先来一波">预期效果先来一波</h3>
<figure data-type="image" tabindex="1"><img src="https://heihei12305.github.io/post-images/1579417038963.gif" alt="" loading="lazy"></figure>
<p>😼是不是心动啦，各位大佬的github博客质量那是相当高，就是不能翻页，看完一个还要回到首页README链接🔗，感觉不太友好。尤其像我这样不是第一遍看👀，想回顾一下的🧍‍♂️，无法满足快速翻阅的需求。</p>
<p>让我们开始吧！</p>
<h3 id="首先找到你喜欢的github项目star-fork-一条龙我寻思着这个就不用再多余赘述了吧">首先，找到你喜欢的github项目，star, fork 一条龙，我寻思着这个就不用再多余赘述了吧。</h3>
<hr>
<h3 id="然后打开-gitbook注册登陆创建空间巴拉巴拉的-看下面的">然后打开 gitbook，注册登陆，创建空间，巴拉巴拉的。 👇看下面的📃</h3>
<figure data-type="image" tabindex="2"><img src="https://heihei12305.github.io/post-images/1579417640747.gif" alt="" loading="lazy"></figure>
<h3 id="然后就是简单的创建space环节了-gitbook可以免费创建一个组织一个-个人空间-想必是可以满足大多数人的需求的呢">然后就是🔜，简单的创建space环节了。gitbook可以免费创建一个组织，一个 个人空间 ，想必是可以满足大多数人的需求的呢！😸</h3>
<figure data-type="image" tabindex="3"><img src="https://heihei12305.github.io/post-images/1579417946901.gif" alt="" loading="lazy"></figure>
<h3 id="最后就是简单快速的链接github仓库一键生成了">最后，就是简单快速的链接🔗github仓库，一键生成了！</h3>
<blockquote>
<p>因为比较慢，分成多个gif展示了</p>
</blockquote>
<ol>
<li>🔗链接进行中</li>
</ol>
<figure data-type="image" tabindex="4"><img src="https://heihei12305.github.io/post-images/1579418320995.gif" alt="" loading="lazy"></figure>
<ol start="2">
<li>选择仓库</li>
</ol>
<figure data-type="image" tabindex="5"><img src="https://heihei12305.github.io/post-images/1579418436486.gif" alt="" loading="lazy"></figure>
<ol start="3">
<li>✅，成果展示！<br>
<img src="https://heihei12305.github.io/post-images/1579419486223.gif" alt="" loading="lazy"></li>
<li>gitbook 也有提供可阅读外链呢！为了不影响各位大大blog 的star数量，我就不贴我自己做的gitbook 阅读链接🔗了！大家可以自行star, fork制作呢！<br>
<img src="https://heihei12305.github.io/post-images/1579419767657.gif" alt="" loading="lazy"></li>
</ol>
<hr>
<h3 id="总结">总结：</h3>
<p>使用gitbook优势:</p>
<ul>
<li>方便阅读，方便阅读，方便阅读！github不能翻页真滴难受。</li>
<li>加载速度较 github 快很多</li>
<li>方便快速回忆性浏览</li>
</ul>
<p>使用gitbook劣势：</p>
<ul>
<li>无法看到 大佬 blog 底下的评论</li>
<li>gitbook制作需要翻墙</li>
</ul>
<p>最佳实践：<br>
第一次👀时，建议在github上，star，fork一条龙，毕竟大佬们都付出了巨大精力来写这些blog。如果blog价值很高，需要多次回顾，建议搞成gitbook小书，方便阅读。</p>
<p>🙏谢谢阅读！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[iTerm2 快捷命令]]></title>
        <id>https://heihei12305.github.io/post/iterm2-kuai-jie-ming-ling/</id>
        <link href="https://heihei12305.github.io/post/iterm2-kuai-jie-ming-ling/">
        </link>
        <updated>2020-01-14T14:46:12.000Z</updated>
        <content type="html"><![CDATA[<ul>
<li>command + t 新建标签🏷️<br>
<img src="https://heihei12305.github.io/post-images/1579014351285.gif" alt="" loading="lazy"></li>
<li>command + w	关闭标签🏷️<br>
<img src="https://heihei12305.github.io/post-images/1579014370912.gif" alt="" loading="lazy"></li>
<li>command + 数字 切换标签🏷️<br>
<img src="https://heihei12305.github.io/post-images/1579014398577.gif" alt="" loading="lazy"></li>
<li>command + 左右键	切换标签🏷️<br>
<img src="https://heihei12305.github.io/post-images/1579014539217.gif" alt="" loading="lazy"></li>
<li>command + enter	切换全屏<br>
<img src="https://heihei12305.github.io/post-images/1579014417459.gif" alt="" loading="lazy"></li>
<li>command + d 垂直分屏<br>
<img src="https://heihei12305.github.io/post-images/1579015306805.gif" alt="" loading="lazy"></li>
<li>command + shift + d 水平分屏<br>
<img src="https://heihei12305.github.io/post-images/1579015319876.gif" alt="" loading="lazy"></li>
<li>ctrl + u	清除当前行<br>
<img src="https://heihei12305.github.io/post-images/1579015405233.gif" alt="" loading="lazy"></li>
<li>ctrl + l	清屏<br>
<img src="https://heihei12305.github.io/post-images/1579015398236.gif" alt="" loading="lazy"></li>
<li>ctrl + a	到行首 ctrl + e	到行尾<br>
<img src="https://heihei12305.github.io/post-images/1579015391632.gif" alt="" loading="lazy"></li>
</ul>
]]></content>
    </entry>
</feed>